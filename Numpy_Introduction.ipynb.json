{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "28b9a19f",
   "metadata": {},
   "source": [
    "#Import Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2699d59d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import panda as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54477aa1",
   "metadata": {},
   "source": [
    "# Create data with Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "111302ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 3 4 5]\n"
     ]
    }
   ],
   "source": [
    "#create a serie\n",
    "\n",
    "S=[1, 2, 3, 4, 5]  # Definition of a Serie\n",
    "S_series= np.array(S)\n",
    "print(S_series)  # affiche le numpy array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "155bdc2a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "#Create a numpy data with a matrix\n",
    "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
    "MatrixNumpy = np.array(matrix)\n",
    "print(MatrixNumpy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2b804a3a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0.]\n",
      " [0. 0. 0.]\n",
      " [0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "#Create a numpy array with zeros\n",
    "zeros_numpy= np.zeros((3,3))\n",
    "print(zeros_numpy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "665cc767",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create a numpy array with ones\n",
    "array_ones = np.ones((4,2))\n",
    "print(array_ones)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "50ba7d63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0.],\n",
       "       [0., 1., 0.],\n",
       "       [0., 0., 1.]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#How  to create an Identity Matrix \n",
    "Identity_eye = np.eye(3)\n",
    "Identity_eye"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9eff3052",
   "metadata": {},
   "outputs": [],
   "source": [
    "array_linspace = np.linspace(0, 1, 10)#Très utile pour les graphiques\n",
    "array_linspace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "34b9a902",
   "metadata": {},
   "outputs": [],
   "source": [
    "# How to create numpy array with random numbers\n",
    "random_Numbers = np.random.random((5,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edf77c2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Basic Mathematics function\n",
    "array1=array_with_liste\n",
    "array_sum = np.sum(array1)\n",
    "array_mean = np.mean(array1)\n",
    "array_std = np.std(array1)\n",
    "array_min = np.min(array1)\n",
    "array_max = np.max(array1)\n",
    "array_sqrt = np.sqrt(array1)\n",
    "array_abs = np.abs(array1)\n",
    "array_power = np.power(array1, 2)\n",
    "array_exp = np.exp(array1)\n",
    "array_log = np.log(np.abs(array1))\n",
    "array_sin = np.sin(array1)\n",
    "array_median = np.median(array1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "7339b1fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.62888683 0.46820062 0.63390649]\n",
      " [0.80171852 0.4950495  0.74139492]\n",
      " [0.50270993 0.42939768 0.72045937]]\n"
     ]
    }
   ],
   "source": [
    "# Produit matriciel\n",
    "matrice1 =np.random.random((3,3))\n",
    "matrice2 =np.random.random((3,3))\n",
    "\n",
    "produit_matriciel = np.dot(matrice1,matrice2)\n",
    "print(produit_matriciel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "1dce56a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "matrice1 =np.random.random((3,3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fbd5ac96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.64906414 0.09357582 0.4636238 ]\n",
      " [1.17405163 0.28666236 0.74252816]\n",
      " [1.04536926 0.3323829  0.56557094]]\n"
     ]
    }
   ],
   "source": [
    "# Produit matriciel\n",
    "matrice1 =np.random.random((3,3))\n",
    "matrice2 =np.random.random((3,3))\n",
    "\n",
    "produit_matriciel = np.dot(matrice1,matrice2)\n",
    "print(produit_matriciel)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7fbb2951",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.68879806 0.81591126 0.5840659 ]\n",
      " [0.15248655 0.29835071 0.14305503]\n",
      " [0.06164514 0.415223   0.5535909 ]]\n"
     ]
    }
   ],
   "source": [
    "#Transposed\n",
    "transpost_Matrix = np.transpose(matrice1)\n",
    "print(transpost_Matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e138ecea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0.]\n",
      " [0. 1. 0.]\n",
      " [0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "#Matrice Inversion\n",
    "array_eye=np.eye((3))\n",
    "inverse = np.linalg.inv(array_eye)\n",
    "print(inverse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "038eee53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0777475103117779\n"
     ]
    }
   ],
   "source": [
    "# Determinant of Matrices\n",
    "\n",
    "arrayrandom2=np.random.random((3,3))\n",
    "determinant=np.linalg.det(arrayrandom2)\n",
    "print(determinant)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9dc725d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9641802541196556\n"
     ]
    }
   ],
   "source": [
    "# Accès aux éléments\n",
    "array1 = np.random.random((1,4))\n",
    "premier_element = array1[0,1]\n",
    "print(premier_element)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a1d6df92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 0.86720553 20.          0.90920569  0.48305955]]\n"
     ]
    }
   ],
   "source": [
    "# Modification of an elelement\n",
    "array1[0,1]=20\n",
    "print(array1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "7aceb4f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([20.])"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sélection des éléments qui respectent une condition\n",
    "condition = array1 > 5\n",
    "array_with_condition = array1[array1 > 2]\n",
    "array_with_condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3f6bf54",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
